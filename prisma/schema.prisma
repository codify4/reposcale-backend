// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  githubId  String  @unique
  email     String? @unique
  username  String
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  githubInstallation GithubInstallation[]
  shareLinks ShareLink[]

  @@map("users")
}

model Waitlist {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist")
}

model Order {
  id           String   @id @default(cuid())
  lemonOrderId String   @unique
  userId       Int
  productId    Int
  variantId    Int
  amount       Float
  purchasedAt  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
}

model GithubInstallation {
  id              Int      @id @default(autoincrement())
  installationId  String   @unique
  userId          Int
  permissions     Json?
  repositorySelection String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])
  repositories    Repository[]
}

model Repository {
  id              Int      @id @default(autoincrement())
  githubRepoId    Int      @unique
  installationId  String
  name            String
  description     String?
  languages       Json?
  stars           Int
  forks           Int
  watchers        Int
  members         Int?
  lastFetched     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  installation    GithubInstallation @relation(fields: [installationId], references: [installationId])
  shareLinks      ShareLink[]
}

model ShareLink {
  id          String   @id @default(cuid())
  userId      Int
  repositoryId Int
  token       String   @unique
  name        String?
  description String?
  password    String?
  expiresAt   DateTime?
  maxViews    Int?
  viewCount   Int      @default(0)
  isActive    Boolean  @default(true)
  allowMembers Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  repository  Repository @relation(fields: [repositoryId], references: [id])
  views       ShareView[]
}

model ShareView {
  id          String   @id @default(cuid())
  shareLinkId String
  ipAddress   String?
  userAgent   String?
  viewedAt    DateTime @default(now())
  
  shareLink   ShareLink @relation(fields: [shareLinkId], references: [id])
} 